pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'your-docker-registry'
        JAVA_HOME = '/usr/lib/jvm/openlogic-openjdk-21-hotspot'
        MAVEN_HOME = '/data/admin/jenkins/.jenkins/tools/hudson.tasks.Maven_MavenInstallation/Maven_3.9.2'
        KUBE_CONFIG = credentials('kubeconfig')
        DOCKER_USER = thavamani0212
        DOCKER_PASS = Thavamani126@
        SERVICE_NAME = 'productcatalogue'
        SERVICE_PORT = '8020'
        SONAR = 'Sonar'
        SCANNER_HOME = tool 'SonarQube Scanner 4.7';
        SERVICE_NAME = 'shopfront'
        SERVICE_PORT = '8010'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build and Test') {
            steps {
                sh 'mvn clean package'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_REGISTRY}/${SERVICE_NAME}:${BUILD_NUMBER} ."
            }
        }
        
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-registry-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh "docker login -u $DOCKER_USER -p $DOCKER_PASS ${DOCKER_REGISTRY}"
                    sh "docker push ${DOCKER_REGISTRY}/${SERVICE_NAME}:${BUILD_NUMBER}"
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig([credentialsId: 'kubeconfig']) {
                    dir('../kubernetes') {
                        sh "kubectl apply -f ${SERVICE_NAME}-service.yaml"
                        sh "kubectl set image deployment/${SERVICE_NAME} ${SERVICE_NAME}=${DOCKER_REGISTRY}/${SERVICE_NAME}:${BUILD_NUMBER}"
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                withKubeConfig([credentialsId: 'kubeconfig']) {
                    sh "kubectl rollout status deployment/${SERVICE_NAME}"
                    sh "curl -s http://localhost:${SERVICE_PORT}/health"
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo "${SERVICE_NAME} pipeline completed successfully!"
        }
        failure {
            echo "${SERVICE_NAME} pipeline failed!"
        }
    }
} 